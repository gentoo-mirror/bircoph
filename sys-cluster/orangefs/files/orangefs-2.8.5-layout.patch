--- src/common/misc/server-config.h.orig	2012-01-26 18:59:23.000000000 +0400
+++ src/common/misc/server-config.h	2012-02-27 20:34:49.440571787 +0400
@@ -122,6 +122,9 @@
     int32_t directio_thread_num;
     int32_t directio_ops_per_queue;
     int32_t directio_timeout;
+
+    /* Specify default data layout: none, random, round-robin (default) */
+    int default_layout;
 } filesystem_configuration_s;
 
 typedef struct distribution_param_configuration_s
--- src/common/misc/server-config.c.orig	2012-01-26 18:59:23.000000000 +0400
+++ src/common/misc/server-config.c	2012-02-27 20:41:51.029128439 +0400
@@ -125,6 +125,7 @@
 static DOTCONF_CB(directio_thread_num);
 static DOTCONF_CB(directio_ops_per_queue);
 static DOTCONF_CB(directio_timeout);
+static DOTCONF_CB(get_default_layout);
 
 static FUNC_ERRORHANDLER(errorhandler);
 const char *contextchecker(command_t *cmd, unsigned long mask);
@@ -1018,6 +1019,25 @@
     {"DirectIOTimeout", ARG_INT, directio_timeout, NULL,
         CTX_STORAGEHINTS, "1000"},
 
+    /* Specifies the default data layout for a filesystem.
+     * Supported values are:
+     *
+     * none - PVFS_SYS_LAYOUT_NONE:
+     * servers are selected in the order listed  in the configuration
+     * starting with the first one;
+     *
+     * random - PVFS_SYS_LAYOUT_RANDOM:
+     * servers are selected in random order but no server is used twice;
+     *
+     * round-robin - PVFS_SYS_LAYOUT_ROUND_ROBIN (default):
+     * servers are selected in the order listed in the configuration
+     * starting with a random one;
+     *
+     * PVFS_SYS_LAYOUT_LIST is currently not supported as a default value;
+     * */
+    {"DefaultLayout", ARG_STR, get_default_layout, NULL,
+        CTX_FILESYSTEM, "round-robin"},
+
     LAST_OPTION
 };
 
@@ -3012,6 +3032,38 @@
     return NULL;
 }
 
+DOTCONF_CB(get_default_layout)
+{
+    struct filesystem_configuration_s *fs_conf = NULL;
+    struct server_configuration_s *config_s =
+        (struct server_configuration_s *)cmd->context;
+
+    fs_conf = (struct filesystem_configuration_s *)
+        PINT_llist_head(config_s->file_systems);
+    assert(fs_conf);
+
+    int *layout = &fs_conf->default_layout;
+
+    if(!strcmp(cmd->data.str, "round-robin"))
+    {
+        *layout = PVFS_SYS_LAYOUT_ROUND_ROBIN;
+    }
+    else if(!strcmp(cmd->data.str, "random"))
+    {
+        *layout = PVFS_SYS_LAYOUT_RANDOM;
+    }
+    else if(!strcmp(cmd->data.str, "none"))
+    {
+        *layout = PVFS_SYS_LAYOUT_NONE;
+    }
+    else
+    {
+        return "Error unknown DefaultLayout option, valid values are:\n"
+               "none, random, round-robin\n";
+    }
+    return NULL;
+}
+
 /*
  * Function: PINT_config_release
  *
--- src/client/sysint/sys-create.sm.orig	2012-01-26 18:59:23.000000000 +0400
+++ src/client/sysint/sys-create.sm	2012-02-27 20:31:50.000273510 +0400
@@ -144,6 +144,8 @@
     PVFS_error ret = -PVFS_EINVAL;
     PINT_smcb *smcb = NULL;
     PINT_client_sm *sm_p = NULL;
+    struct server_configuration_s *server_config = NULL;
+    struct filesystem_configuration_s* cur_fs = NULL;
 
     gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_isys_create entered\n");
 
@@ -242,7 +244,17 @@
     }
     else
     {
-        sm_p->u.create.layout.algorithm = PVFS_SYS_LAYOUT_ROUND_ROBIN;
+        /* get default filesystem layout */
+        server_config = PINT_get_server_config_struct(parent_ref.fs_id);
+        cur_fs = PINT_config_find_fs_id(server_config, parent_ref.fs_id);
+
+        if (!cur_fs)
+        {
+            gossip_err("invalid (unknown) fs id specified\n");
+            return ret;
+        }
+
+        sm_p->u.create.layout.algorithm = cur_fs->default_layout;
     }
 
     sm_p->object_ref = parent_ref;
